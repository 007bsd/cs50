
> Logical and && : x and y both are true
> Logical OR || : x is or y true

> ternianry operators:

int x = (expr) ? 5: 6

5 is true
6 is false

> Loops:

1) while (expr)
{
}

2)
do {
}
while(expr)


3) For loop


> const is use in the variable to make sure the value is not changed
const int N = 3;
This can be put on top of the program

> clang -o average_array average_array.c -lcs50

\0:  Null character at the string. It is always available at the end (check names.c file in week_2)

int main(int argc, string argv[])

argc : argument counter
argv : argument vectors

Functions:

return_type name (argument type)

int add_two_ints(int a, int b){
  int sum;
  sum = a + b;
  return sum;
}
> when Functions do not take any arguments called void type
> When functions do not return any arguments type called void return


Arrays:
> Arrays is a data structure which holds values for contineous memory location
> It holds the same data types
> Array can be access with the help of index numbers
> The index of array always starts with 0 and end of the index is end with n-1

type name[size]

double menu_prices[8]

> You do not need to explicitly declare the size of an Array
> Array variable can be assigned but not the array itself
> Array is usually pass by reference unlike variables in a function are pass by value


Week 3:
> Search type:
Linear search:
> From left to right
> Repeat from the starting of the array element

O(n): Worst case of finding an element
Omega(n): Best case of finding an element

Binary search:
> half of the search from left to right: Divide and search
> Sort the Array first
> Calculate the mid point and find the element from the sorted Array
> Keep repeating the process until you find the array

O(log n): Worst case of finding an element
Omega(1): Best case of finding an element

Selection Search:
> Select the smallest number from the unsorted array
> Swap the selected element with the first element of the unsorted part and keep repeating

Insertion Sort:
> Call the first element as sorted
> shift the element by inserting it
O(n2): Worst case
Omega(n): Best case

Bubble sort:
> Larger numbers compare with the immediate numbers to the side and end up at the end
> Swap counter. Look to the adjecent value and swap them and if they are out of order then add to the swap counter
> Repeat the swap counter to Zero until 0 after reset

O(n2) : Worst case
Omega(1): Best case scenarios


Recursive or Recursion:
> Call the sort inside another Sort

int fact(int n){
if (n == 1)
  return 1;
else
  return n * fact(n-1);
}

> Fibonaci series is multiple base cases
> multiple Recursion cases also called as collatz cases

collatz cases:
No of steps to get back to 1
> If n = 1 , stop
> If n is even, then repeat the process by n/2
> If n is odd, then repeat the process by 3n+1

int collatz(int n)
{
if (n ==1)
{
return 0;
}
else if(n %2 ==0)
{
return 1 + collatz(n/2);
}
else
{
return 1+ collatz(3*n+1);
}


Merge Sort:
> Merge sort is better for other search
> Sort the left half and sort the right half then merge the two Arrays

O(log n)
Omega(log n)

Algorithm:

Big O notation:
O(n), O(n) and O(log n)

O(n2): Bubble sort, selection sort
O(n): Binaray search
O(log n ): Linear search


Omega: Opposite of Binary search
Omega(n) : Selection sort, Bubble Sort
Omega(1): Linear search
Omega(log n): Binaray search


>typdef: to define a structure

typedef struct {
string details
}person;

person above is the name of the structure

#################Week 4

Hexadecimal: 0 1 2 3 4 5 6 7 8 9 A B C D E F
Decimal: 0 1 2 3 4 5 6 7 8 9

8 binray digit: 8 bits : 2*0 -- 2*7 : 1 2 4 8 16 32 64 128

FF in Decimal: 255 in decinal: 1 1 1 1 1 1 1 1 in binrary

int is 4 bytes

Address:
& : to get out the adress of the variable
%p: To print out that address
* : Go to the address. It undo the operation

int *p : It is a pointer of the data type integer. It holds the address of the variable

int n = 50;
int *p = &n;


typedef char* string;

so char*

> string can not be compare with the itself as they hold different address like integer

malloc: allocating new memory for string

char *t = malloc(strlen(s)+1)

The above is a data type of stdlib.h

free: free is a function to deallocate the same memory used in the memory

valgrind: It is a tool indentify the memory used

help50 valigrind ./copy

swap

void swap (int a , int b){

int tmp =a;
a = b;
b = tmp;
}


#############################
Hexadecimal:
1111 : F
0x0 : Hexadecimal
0: Decimal

1 16 256

Pointers:

data type: size in bytes
int: 4
char: 1
float: 4
double: 8
long long: 8

Pointers are nothing more than an address. This is where the variable lives
It is value in the memory address. type describes the data located at that memory address

int p;
p = 5;
int *pt ;
pt = &p;

> always set the value as NULL, if there is nothing to allocate
pt = NULL;
* : Deference operator used in Pointers

int pc = 5;
int *pt = &pc;

Deferencing a variable is called with NULL pointers is result in Segmentation fault

string : char *

array:
double arr[]
&arr[i]: Is a pointer to double where the ith element lives


&arr[i] : Pointer where ith element lives

k = 5;
int *pk ;
*pk = 35;

Then k becomes 35. So pointer helps in changing the caller function and as well as the calle function

Dynamic memory Allocation:

Stack memory and Heap memory

> Using pointers, we can dynamically allocated memory
> The memory leaves in the HEAP
malloc()

int x; // stack memory
int *px = malloc(sizeof(int))  // dynamically allocated memory

int x - GetInt(); // stack memory
float stack_array[x]; // array of floats in the stack

float *heap_array = malloc(x * sizeof(float)); // array of floats on the heap

// dynamically allocate the memory
char *word = malloc(50 * (sizeof(char)));

// free the memory
After allocating or dynamically allocating memory, free the memory

free(word);
Golden rule of the memory:
> Every block of memory should be subsequently free()
> Only memory that malloc() should be free()
> Do not free() a block of memory more than once

int m; // Just declaration of the variable which lives in the stack
int * a;  // Just declaration of the pointer and lives in the stack
int *b = malloc(sizeof(int));   // Pointing to address of the int

a = &m; // a points to m or get the address of the m
a= b;  // a and b now points to the same address
m =10;
*b = m +2; // b =12  . Deference the b. Go to the address of b where it lives and manipulate

free(b)

*a = 11 // This will result in a segmention fault as we have already free the memory of ""b"" above or where the b was pointing

Call Stacks:
Only one function can be an active frame

int fact(int n){
if (n ==1){
return 1;
}
else
{
return n * fact(n-1);
}
}

int main(void){
printf("%i\n", fact(5));
}

main() -> printf() ->  fact() 5-1

File Pointers:

FILE*

stdio.h > file headers for FILE
fopen(): opens a file and gives a file pointer to it

FILE * ptr = fopen(<file name>, <operation>);

FILE * ptr1 = fopen("file1.txt", "r");  // read file
FILE * ptr1 = fopen("file2.txt", "w"); // write  file
FILE * ptr1 = fopen("file3.txt", "a"); // append file

fclose(): Closes the file

fclose(<file pointer>);

fclose(ptr1);

fgetc(): reads and returns the next character from the file pointed to
FILE * ptr1 = fopen("file1.txt", "r");  // read file
char ch = fgetc(<file pointer>);
char ch = fgetc(ptr1);

char ch;
FILE * ptr1 = fopen("file1.txt", "r");  // read file
while((ch = fgetc(ptr1)) != EOF)
  printf("%c", ch);
The above is same as that of cat.c in the linux os

fputc(): Writes a single character
fputc(<character>, <file pointer>);
 fputc("A", ptr2);
char ch;
while((ch = fgetc(ptr)) != EOF)
  fputc(ch, ptr2);
Above command is same as the linux cp command. cp.c

fread():
Read all the contents of the file.

fread(<buffer>, <size>, <qty>, <file pointer>);
buffer :  a pointer
size : amount of the data

int arr[10];
fread(arr, sizeof(int), 10, ptr);  // the ptr ptr points to getting stored in arr

double * arr2 = malloc(sizeof(double) * 80);
fread(arr2, sizeof(double), 80, ptr);

Only one character cllecting from the file ptr points to:
char c;
fread(&c, sizeof(char),1, ptr);

fwrite():

fwrite(<buffer>, <size>, <qty>, <filepointer>);  // buffer to the file. Read from the buffer than write to the file ptr points to
int arr[10];
fwrite(arr, sizeof(int), 10, ptr);

double * arr2 = malloc(sizeof(double) * 80);
fwrite(arr2, sizeof(double), 80, ptr);

char c;
fwrite(&c, sizeof(char),1, ptr);


fgets(): Reads the full string
fputs(): Writes the full string
fprintf(): writes the formatted string to a file
fseek(): allows to rewind and fast forward in a file
ftell(): Tells you at what byte position you are at
feof(): tells you whether you have read to the end of the file
ferror(): Indicates whether an error has occurred in the file


##############
Run cs50 locally

clang prog.c -lcs50 -o prog



##### Data Strcutures ##### Lecture 5

int main(void)
{
int *x;  // declaration of pointer x
int *y; // declaration of pointer y

x = malloc(sizeof(int)) // allocating the memory chunk for the pointer x

*x = 42;  // Deferencing the pointer with the * and assigning a value. This is same as int x =42;
*y = 43;  // this is buggy bcs *y is not declared

if we change above bug by
y = x;
*y = 43;
}


Array :

Running time of insertion of an array:

O(n2)
O(n log n)
O(n)  : Insert array
O(log n) : Search Array
O(1)

> any time you allocate memory using malloc, make sure to sure if returns is NULL or and stop the programm

int *list = malloc(3*sizeof(int));

if(list ==NULL){
  return 1;
}

int *list1 = reaclloc(list, 4*sizeof(int))

=> With realloc you do need to copy


Structure:

. : To access the properties of the structure
* : Dereferencing the variables

Linkedlist: A data structure which linked together back to back. It contains pointers also

typdef struct{
string name;
string number;
}person;

// declare the struct node
typdef struct node{
int number;
struct node *next; // the pointer pointing to next element
}node;

// assigning the value
node *n = malloc(sizeof(node))
(*n).number = 2; or n->number = 2;
n->next = NULL;

Always check the memory after allocating the memory. SO
node *n = malloc(sizeof(node))
if (n != NULL){
n->number = 2;
n->next = NULL;
}

list = n;

node *tmp = list;

while(tmp->NEXT != NULL){
tmp = tmp->NEXT;
}

n->NEXT = list;
list = n;

=> Linked list gives dynamism

Trees:

typdef struct node{
int number;
struct node *left;
struct node *right;
}node;

bool search (node *tree)
{
if (tree == NULL)
{
return false;
}
else if (50 < tree->number){
return search(tree->left);
}

else if (50 > tree->number){
return search(tree->right);
}

else (50 == tree->number){
return true;
}
}


Hash Table: Hash table is indexed into by using hash Functions
Tries: Each of the nodes are Arrays
Queues: FIFO
Stacks: LIFO
Dictionaries: keys and values


Data Structure:
>>Array:
* Insertion is bad
* Deletion is bad
* Look up in an array is good
* Relatively easy to sorting
* Relatively small size wise
* Stuck with fixed size, no flexibility

Linked List:
* Insertion is easy
* Deletion is easy
* Searching is not so easy
* Look up is bad
* Sorting is difficult

Hash Table:
* Insertion is easy
* Deletion is easy
* Look up is better than the Linkedlist
* Sorting is bit difficult
* Can run into gmut size.

Tries:
* Insertion is complex. Have dynamism
* Deletion is easy
* Look up is easy
* Sorting is easy

Singly Linked List:
* It has node. Node contains two VALUE. One is VALUE( can be int, float, char etc.) and is a pointer to another node

typedef struct slist {
 VALUE val;
 struct *slit next;
}sllnode;

Create Linked list:

sllnode * create(VALUE val);

Find in Single Linked List:
bool find(sllnode* head, VALUE val);

bool exits =  find(list, 6)

Insertion:

sllnode * insert( sllnode* node, VALUE val);
>> First linked all the list before moving the list

Deletion:

void destroy( sllnode * head)
If you have reached the null pointer
Delete the rest of the list
free the current node

Hash Table:
>> Hash table is used when you do not care about the sort
>> It has two function. One is Hash Function and Another is one is the Array

string hashtable[10];  // hash array
int x = hash("john");  // trying to hash funtion. Once you run through it then it will give a place to the "john" in the hash table

hashtable[x] = "john"  // insert

int y = hash("paul")
hashtable[x] = "paul"

unsigned int hash(char * str)
{
int sum = 0;
for (int j=0; str[j] != '\0'; j++)
{
sum +=sum[j]

}
return sum % HASH_MAX
}

>> Collision : Collision occurs when the hash function generates the same data

Tries:
>> It stores the data in key, value pair
>> It combines array, structures and pointers together
>> Follow the roadmap
>> Build the data structure from root to the leafs

typedef struct _trie{
char university[20]
struct _trie* paths[20]
}trie;
